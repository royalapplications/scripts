{"Name":"Dynamic Folder Export","Objects":[{"Type":"DynamicFolder","Name":"System Center VMM - Servers","Description":"This Dynamic Folder will retrieve computer names from System Center Virtual Machine Manager","Notes":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\t<head>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>\r\n\t\t</title>\r\n\t\t<style type=\"text/css\">\r\n\t\t\t.cs2654AE3A{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\r\n\t\t\t.csC8F6D76{color:#000000;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;}\r\n\t\t\t.cs36BE7164{color:#414141;background-color:#FFFFFF;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;}\r\n\t\t\t.cs26DADAAD{color:#000000;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: none;}\r\n\t\t\t.csCCA9035D{color:#0000FF;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: underline;}\r\n\t\t</style>\r\n\t</head>\r\n\t<body>\r\n\t\t<p class=\"cs2654AE3A\"><span class=\"csC8F6D76\">This Dynamic Folder will retrieve </span><a name=\"_dx_frag_StartFragment\"></a><span class=\"cs36BE7164\">computer names from System Center Virtual Machine Manager (both hosts and virtual machines)</span><a name=\"_dx_frag_EndFragment\"></a><span class=\"cs36BE7164\">.</span></p><p class=\"cs2654AE3A\"><span class=\"csC8F6D76\">Detailed instructions is available in this article on PowerShell Magazine:</span></p><p class=\"cs2654AE3A\"><span class=\"csC8F6D76\"><a class=\"cs26DADAAD\" href=\"https://www.powershellmagazine.com/2019/01/03/using-powershell-for-generating-dynamic-folders-in-royal-ts\"><span class=\"csCCA9035D\">https://www.powershellmagazine.com/2019/01/03/using-powershell-for-generating-dynamic-folders-in-royal-ts</span></a></span><span class=\"csC8F6D76\"> </span></p><p class=\"cs2654AE3A\"><span class=\"csC8F6D76\">&nbsp;</span></p></body>\r\n</html>\r\n","ScriptInterpreter":"powershell","DynamicCredentialScriptInterpreter":"json","Script":"$VMMServer = 'VMM.ad.nr.no'\n$VMMCredentialPath = \"$env:USERPROFILE\\VMM_ad_nr_no.cred.xml\"\n\n$RDPCredentialName = 'NR\\jer'\n$SSHCredentialName = 'jer'\n\nfunction Get-ServerFromSCVMM {\n    <#\n       .SYNOPSIS\n       Get-ServerFromSCVMM is a command to retrieve server information from System Center Virtual Machine Manager.\n       .DESCRIPTION\n       Get-ServerFromSCVMM is a command to retrieve server information from System Center Virtual Machine Manager.\n\n            Required version: Windows PowerShell 3.0 or later \n            Required modules: VirtualMachineManager\n            Required privileges: Read-permission in SC VMM\n\n       .EXAMPLE\n       Get-ServerFromSCVMM -VMMServer SRV01 -Credential (Get-Credential)\n       .EXAMPLE\n       Export data to Excel (requires the ImportExcel module)\n       $XlsxPath = 'C:\\temp\\Servers_VMM_InventoryReport.xlsx'\n       Get-ServerFromSCVMM -VMMServer SRV01 -Credential (Get-Credential) | \n       Export-Excel -Path $XlsxPath -WorkSheetname Servers -AutoSize -TableName Servers -TableStyle Light1\n   #>\n   [CmdletBinding()]\n    Param(\n        [PSCredential]$Credential = (Get-Credential),\n        [string]$VMMServer = 'SRV01'\n    )\n\n\n    $VMMData = @()\n\n    try {\n\n        Write-Verbose \"Connecting to VMM Server $VMMServer\"\n\n        $VMMPSSession = New-PSSession -ComputerName $VMMServer -Credential $Credential -Authentication Negotiate -ErrorAction Stop\n\n        Write-Verbose \"Getting VM hosts\"\n\n        $VMHosts = Invoke-Command -Session $VMMPSSession -ScriptBlock {\n\n            $null = Get-SCVMMServer -ComputerName $using:VMMServer\n            Get-SCVMHost | Select-Object @{n='Name';e={$_.ComputerName}}, @{n='IsVirtualMachine';e={$false}}, LogicalCPUCount, PhysicalCPUCount, @{Name = \"MemoryInGB\"; Expression = {\"{0:N2}\" -f ($_.TotalMemory / 1gb)}}, @{Name = \"TotalStorageCapacityInGB\"; Expression = {\"{0:N2}\" -f ($_.LocalStorageTotalCapacity / 1gb)}}, Operatingsystem\n        \n\n        } -ErrorAction Stop | Select-Object Name,IsVirtualMachine,LogicalCPUCount,PhysicalCPUCount,MemoryInGB,TotalStorageCapacityInGB,OperatingSystem,Description\n\n        $VMMData += $VMHosts\n\n        Write-Verbose \"Found $($VMHosts.Count) VM hosts in VMM\"\n\n        Write-Verbose  \"Getting VMs\"\n\n        $VMs = Invoke-Command -Session $VMMPSSession -ScriptBlock {\n\n            Get-SCVirtualMachine | \n                Where-Object ReplicationMode -ne 'Recovery' | \n                Where-Object {$PSItem.OperatingSystem.Name -notlike \"*Windows XP*\" -and $PSItem.OperatingSystem.Name -notlike \"*Windows 7*\" -and $PSItem.OperatingSystem.Name -notlike \"*Windows 10*\" -and $PSItem.OperatingSystem.Name -ne 'Unknown'} | \n                Select-Object Name, @{n='IsVirtualMachine';e={$true}}, @{n = 'LogicalCPUCount'; e = {$PSItem.CPUCount}}, PhysicalCPUCount, @{Name = \"MemoryInGB\"; Expression = {\"{0:N2}\" -f ($_.Memory / 1kb)}}, @{Name = \"TotalStorageCapacityInGB\"; Expression = {\"{0:N2}\" -f ($_.TotalSize / 1gb)}}, Operatingsystem,Description\n      \n\n        } -ErrorAction Stop | Select-Object Name,IsVirtualMachine,LogicalCPUCount,PhysicalCPUCount,MemoryInGB,TotalStorageCapacityInGB,OperatingSystem,Description\n\n        $VMMData += $VMs\n\n        Write-Verbose \"Found $($VMs.Count) VMs in VMM\" \n\n    }\n\n    catch {\n\n        Write-Error \"An error occured during VMM operations: $($_.Exception.Message)\"\n\n    }    \n\n    if ($VMMPSSession) {\n\n        $VMMPSSession | Remove-PSSession\n\n    }\n\n    $VMMData\n\n} #endfunction\n\n\nif (Test-Path -Path $VMMCredentialPath) {\n\n    $VMMCredential = Import-Clixml -Path $VMMCredentialPath\n\n} else {\n\n    $VMMCredential = Get-Credential -Message 'Specify VMM credentials'\n    $VMMCredential | Export-Clixml -Path $VMMCredentialPath\n\n}\n\n[System.Collections.ArrayList]$Servers = @()\n\nGet-ServerFromSCVMM -VMMServer $VMMServer -Credential $VMMCredential | Sort-Object -Property Name | ForEach-Object {\n    \n    $Server = $PSItem\n\n    if ($Server.Description) {\n\n        $Description = ($Server.OperatingSystem.Name + ' (' + $Server.Description + ')')\n\n    } else {\n\n        $Description = $Server.OperatingSystem\n\n    }\n\n    switch -Wildcard ($PSItem.OperatingSystem)\n    {\n        \"*Linux*\" {\n        \n            $null = $Servers.Add([PSCustomObject]@{\n            Name = $Server.Name\n            Type = 'TerminalConnection'\n            TerminalConnectionType = 'SSH'\n            ComputerName = $Server.Name\n            CredentialName = $SSHCredentialName\n            Path = 'Linux'\n            Description = $Description\n        })\n        }\n    \n        \"*Windows*\" {\n        \n            $null = $Servers.Add([PSCustomObject]@{\n            Name = $Server.Name\n            Type = 'RemoteDesktopConnection'\n            ComputerName = $Server.Name\n            CredentialName = $RDPCredentialName\n            Path = 'Windows'\n            Description = $Description\n        })\n        \n        }\n    \n        Default {\n        \n            $null = $Servers.Add([PSCustomObject]@{\n            Name = $Server.Name\n            Type = 'RemoteDesktopConnection'\n            ComputerName = $Server.Name\n            Path = 'Other'\n            Description = $Description\n        })\n        \n        }\n    \n    }\n\n} \n\n$RoyalTSObjects = @{}\n$null = $RoyalTSObjects.Add('Objects',$Servers)\n\n\n$RoyalTSObjects | ConvertTo-Json"}]}