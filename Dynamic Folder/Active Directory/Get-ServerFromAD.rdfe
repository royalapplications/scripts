{"Name":"Dynamic Folder Export","Objects":[{"Type":"DynamicFolder","Name":"AD - Servers template","Description":"This Dynamic Folder will retrieve computer accounts from Active Directory","Notes":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\t<head>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>\r\n\t\t</title>\r\n\t\t<style type=\"text/css\">\r\n\t\t\t.cs2654AE3A{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\r\n\t\t\t.csC50ED1C1{color:#414141;background-color:#FFFFFF;font-family:'Microsoft Sans Serif';font-size:11.5pt;font-weight:normal;font-style:normal;}\r\n\t\t\t.csC8F6D76{color:#000000;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;}\r\n\t\t\t.cs26DADAAD{color:#000000;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: none;}\r\n\t\t\t.csCCA9035D{color:#0000FF;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: underline;}\r\n\t\t</style>\r\n\t</head>\r\n\t<body>\r\n\t\t<p class=\"cs2654AE3A\"><a name=\"_dx_frag_StartFragment\"></a><span class=\"csC50ED1C1\">This Dynamic Folder will retrieve computer accounts from Active Directory with an operating system name starting with Windows Server*, exclude Cluster Name Objects and include computer accounts which have logged on during the last number of days specified (30 is the default).</span><a name=\"_dx_frag_EndFragment\"></a><span class=\"csC8F6D76\"> </span></p><p class=\"cs2654AE3A\"><span class=\"csC8F6D76\">Detailed instructions is available in this article on PowerShell Magazine:</span></p><p class=\"cs2654AE3A\"><span class=\"csC8F6D76\"><a class=\"cs26DADAAD\" href=\"https://www.powershellmagazine.com/2019/01/03/using-powershell-for-generating-dynamic-folders-in-royal-ts/\"><span class=\"csCCA9035D\">https://www.powershellmagazine.com/2019/01/03/using-powershell-for-generating-dynamic-folders-in-royal-ts/</span></a></span><span class=\"csC8F6D76\"> </span></p></body>\r\n</html>\r\n","ScriptInterpreter":"powershell","DynamicCredentialScriptInterpreter":"json","Script":"function Get-ServerFromAD {\r\n    <#\r\n      .SYNOPSIS\r\n      Get-ServerFromAD is a command to retrieve server information from Active Directory.\r\n      .DESCRIPTION\r\n      Get-ServerFromAD is a command to retrieve server information from Active Directory.\r\n\r\n      You need to install Remote Server Administration Tools (RSAT) in order to leverage the Active Directory module for PowerShell from a workstation. Starting with Windows 10 October 2018 Update, RSAT is included as a set of \"Features on Demand\" in Windows 10 itself. From PowerShell, it can be installed using this command:\r\n      Add-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\r\n\r\n\r\n           Required version: Windows PowerShell 3.0 or later \r\n           Required modules: ActiveDirectory\r\n           Required privileges: Read-permission in AD\r\n\r\n      .EXAMPLE\r\n      Get-ServerFromAD\r\n      .EXAMPLE\r\n      Export data to Excel (requires the ImportExcel module)\r\n      $XlsxPath = 'C:\\temp\\Servers_AD_InventoryReport.xlsx'\r\n      Get-ServerFromAD | \r\n      Export-Excel -Path $XlsxPath -WorkSheetname Servers -AutoSize -TableName Servers -TableStyle Light1\r\n  #>\r\n\r\n    [CmdletBinding()]\r\n    Param(\r\n        [string]$InactiveComputerObjectThresholdInDays = 30,\r\n        [string]$RootOUPath,\r\n        [string]$ADDomainController,\r\n        [pscredential]$ADCredential\r\n    )\r\n\r\n    try {\r\n        \r\n        Import-Module -Name ActiveDirectory -ErrorAction Stop -WarningAction SilentlyContinue\r\n        \r\n    } catch {\r\n        \r\n        Write-Error -Message 'Prerequisites missing (ActiveDirectory module not installed)'\r\n        break\r\n        \r\n    }\r\n\r\n    $Parameters = @{}\r\n\r\n    $null = $Parameters.Add('LDAPFilter', \"(&(objectCategory=computer)(operatingSystem=Windows Server*)(!serviceprincipalname=*MSClusterVirtualServer*))\")\r\n\r\n    $ADProperty = 'name', 'operatingSystem', 'lastlogondate', 'description', 'DistinguishedName', 'CanonicalName'\r\n    $null = $Parameters.Add('Properties', $ADProperty)\r\n\r\n    if ($ADCredential) {\r\n\r\n        $null = $Parameters.Add('Credential', $ADCredential)\r\n\r\n    }\r\n\r\n    if ($RootOUPath) {\r\n\r\n        $null = $Parameters.Add('SearchBase', $RootOUPath)\r\n\r\n    }\r\n\r\n    if ($ADDomainController) {\r\n\r\n        $null = $Parameters.Add('Server', $ADDomainController)\r\n\r\n    }\r\n\r\n    Get-ADComputer @Parameters |\r\n        Where-Object lastlogondate -gt (Get-Date).AddDays( - $InactiveComputerObjectThresholdInDays) |  \r\n        Select-Object -Property $ADProperty |\r\n        Sort-Object -Property name\r\n        \r\n}\r\n\r\n$ADCredentialPath = \"$env:HOMEPATH\\AD.cred.xml\"\r\n\r\nif (Test-Path -Path $ADCredentialPath) {\r\n\r\n    $ADCredential = Import-Clixml -Path $ADCredentialPath\r\n\r\n} else {\r\n\r\n    $ADCredential = Get-Credential -Message 'Specify AD credentials'\r\n    $ADCredential | Export-Clixml -Path $ADCredentialPath\r\n\r\n}\r\n\r\n[System.Collections.ArrayList]$Servers = @()\r\n\r\nGet-ServerFromAD -InactiveComputerObjectThresholdInDays 14 -ADDomainController rbk.ad -ADCredential $ADCredential | ForEach-Object {\r\n\r\n    $null = $Servers.Add([PSCustomObject]@{\r\n        Name = $PSItem.Name\r\n        Type = 'RemoteDesktopConnection'\r\n        ComputerName = $PSItem.Name\r\n        Path = $PSItem.CanonicalName.Replace(\"/$($PSItem.Name)\",'')\r\n    })\r\n\r\n} \r\n\r\n$RoyalTSObjects = @{}\r\n$null = $RoyalTSObjects.Add('Objects',$Servers)\r\n\r\n\r\n$RoyalTSObjects | ConvertTo-Json"}]}